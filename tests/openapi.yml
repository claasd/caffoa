openapi: "3.0.2"
info:
  title: Beenera AppBackend 3.0 API for user/contract mangement
  version: "1.0"

servers:
  - url: https://{STAGE}.api.beenera.de/dbe/mgmt

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    apiVersion:
      type: string
      enum:
        - "2021-02-15"
    error:
      type: object
      properties:
        status:
          type: string
          description: Single string based code describing the error.
        message:
          type: string
          description: Human readable error message.
      required:
        - status
        - message

    address:
      type: object
      properties:
        street:
          type: string
        postalCode:
          type: string
        city:
          type: string
        country:
          type: string
          description: ISO 3166 Alpha 2 code in uppercase letters (DE for Germany, US for United States of America, ...).
          example: DE
      required:
        - street
        - postalCode
        - city
        - country

    regulation:
      type: object
      properties:
        accepted:
          type: boolean
          default: false
        version:
          type: integer
          default: 0
        updatedAt:
          description: the last timestamp this regulation was written
          type: string
          format: date-time
          nullable: true
      required:
        - accepted
        - version

    optIn:
      allOf:
        - type: object
          properties:
            id:
              type: string
          required:
            - id
        - $ref: "#/components/schemas/regulation"

    regulations:
      type: object
      properties:
        privacyStatement:
          $ref: "#/components/schemas/regulation"
        optIns:
          type: array
          items:
            $ref: "#/components/schemas/optIn"
      required:
        - privacyStatement
        - optIns

    userWithoutId:
      type: object
      properties:
        email:
          type: string
        salutation:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
          description: WIP; Format is yet to be specified.
          nullable: true
        birthDate:
          type: string
          format: date
          nullable: true
        address:
          $ref: "#/components/schemas/address"
        deleteDate:
          type: string
          format: date
          readOnly: true
          nullable: true
      required:
        - email
        - firstName
        - lastName

    user:
      allOf:
        - type: object
          properties:
            userId:
              type: string
            lastModified:
              type: string
              format: date-time
              readOnly: true
              nullable: true
            created:
              type: string
              format: date-time
              readOnly: true
              nullable: true
            active:
              type: boolean
              readOnly: true
              description: Whether the user is activated

          required:
            - userId
        - $ref: "#/components/schemas/userWithoutId"


    meterSerial:
      type: string
      description: a electric meter serial in DIN-43863-5 form
      example: 1ABC0012345678

    electricitySupplyContractWithoutId:
      description: A electric supply contract describes a household that has a electric meter and an energy supply contract with the B2B partner.
      type: object
      properties:
        type:
          type: string
          enum: [electricity]
          default: electricity
        contractNumber:
          type: string
          nullable: true
        address:
          $ref: "#/components/schemas/address"
        billingAddress:
          $ref: "#/components/schemas/address"
        meterSerial:
          $ref: "#/components/schemas/meterSerial"
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
          nullable: true
      required:
        - startDate
        - type

    electricitySupplyContractWithoutId_Usr:
      allOf:
        - type: object
          properties:
            name:
              type: string
              nullable: true
            energyProviderName:
              type: string
              nullable: true
            hasProducersUpdatedAt:
              type: string
              format: date
              nullable: true
        - $ref: "#/components/schemas/electricitySupplyContractWithoutId"

    contractMetadata:
      type: object
      properties:
        adultCount:
          type: integer
          default: 2
        childCount:
          type: integer
          default: 0
        flatSize:
          type: integer
          default: 128
      required:
        - adultCount
        - childCount
        - flatSize

    electricitySupplyContract_Usr:
      allOf:
        - type: object
          properties:
            contractId:
              type: string
            lastModified:
              type: string
              format: date-time
              readOnly: true
              nullable: true
            created:
              type: string
              format: date-time
              readOnly: true
              nullable: true
          required:
            - contractId
        - $ref: "#/components/schemas/electricitySupplyContractWithoutId_Usr"

    sensor:
      type: object
      properties:
        sensorId:
          $ref: "#/components/schemas/meterSerial"
        type:
          type: string
          enum:
            - smartmeter
            - dongle
            - plug
        manufacturer:
          type: string
          example: bsed
        manufacturerType:
          type: string
          example: nanobeemes
        lastModified:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
      required:
        - sensorId
        - type
        - manufacturer
        - manufacturerType

    administrationNumber:
      type: string
      description: Can be used to allow for automatic meter change, if the sensor provider supports this and keeps the same administration number on meter change. For some smart meters, this is the german MeLo ID.
      example: DE0000991234500000000000006789123
      nullable: true


    electricMeterUpdate:
      type: object
      properties:
        name:
          type: string
          nullable: true
        hasProducer:
          type: boolean
          default: false
        pin:
          type: string
          nullable: true

    electricMeter:
      type: object
      properties:
        meterId:
          $ref: "#/components/schemas/meterSerial"
        name:
          type: string
          nullable: true
        isMainMeter:
          type: boolean
        administrationNumber:
          $ref: "#/components/schemas/administrationNumber"
        startDate:
          type: string
          format: date
        hasSensor:
          type: boolean
        sensor:
          $ref: "#/components/schemas/sensor"
        hasProducer:
          type: boolean
          default: false
        pin:
          type : string
          nullable: true
        lastModified:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
      required:
        - meterId
        - hasSensor
        - isMainMeter
        - startDate
        - hasProducer

    tariffBasePrice:
      type: object
      properties:
        period:
          type: string
          enum:
            - daily
            - yearly
            - monthly
        value:
          type: number
          description: The base price.
      required:
        - period
        - value

    tariffAdvancePayment:
      properties:
        period:
          type: string
          enum:
            - monthly
            - yearly
        value:
          type: number
          description: Value of the advance payment.
      required:
        - period
        - value

    tariffWithoutId:
      type: object
      properties:
        tariffName:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
          nullable: true
        kwhPricing:
          type: number
        basePrice:
          $ref: "#/components/schemas/tariffBasePrice"
        currency:
          type: string
          default: EUR
          description: "ISO 4217; 3 letter code; all uppercase"
        advancePayment:
          $ref: "#/components/schemas/tariffAdvancePayment"
      required:
        - tariffName
        - startDate
        - kwhPricing
        - basePrice
        - currency

    tariff:
      allOf:
        - type: object
          properties:
            tariffId:
              type: string
            lastModified:
              type: string
              format: date-time
              readOnly: true
              nullable: true
            created:
              type: string
              format: date-time
              readOnly: true
              nullable: true
          required:
            - tariffId
        - $ref: "#/components/schemas/tariffWithoutId"

    billWithoutId:
      type: object
      properties:
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        consumptionInKwh:
          type: number
        currency:
          type: string
          default: EUR
          description: "ISO 4217; 3 letter code; all uppercase"
        basicRateBilled:
          type: number
          description: the billed basic rate for the specified period
        energyRate:
          type: number
          description: the energy rate for one kWh
        energyBilled:
          type: number
          description: the billed amount for the specified period
        totalBilled:
          type: number
          description: The total billed amount for the specified period
        taxAmount:
          type: number
          description: the tax amount. Must already be included on totalBilled
        taxPercentage:
          type: number
          description: The tax percentage. E.g. 19%
          example: 19.0
        externalLink:
          type: string
          nullable: true
      required:
        - startDate
        - endDate
        - consumptionInKwh
        - currency
        - basicRateBilled
        - energyRate
        - energyBilled
        - totalBilled
        - taxAmount
        - taxPercentage

    bill:
      allOf:
        - type: object
          properties:
            lastModified:
              type: string
              format: date-time
              readOnly: true
              nullable: true
            created:
              type: string
              format: date-time
              readOnly: true
              nullable: true
            billId:
              type: string
              description: unique id of a bill for a contract
          required:
            - billId
        - $ref: "#/components/schemas/billWithoutId"

    userContractAccess:
      type: object
      properties:
        lastModified:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        allowUpdateMetadata:
          type: boolean
          default: true
          description: User can update metadata of a contract, such as flat size, number of persons etc.
        allowUpdateAddressData:
          type: boolean
          default: false
          description: The user may update address and billing address data of the CONTRACT.
        allowDeviceOnboarding:
          type: boolean
          default: false
          description: The user may execute an onboarding within the specified limits.
        allowBillViewing:
          type: boolean
          default: false
          description: The user can see bills that are added to the supply contract (if billing is part of your whitelabel contract).
        allowTariffManagement:
          type: boolean
          default: false
          description: The user can add/change or update tariffs himself. If set to false, tariff management must be done using this API.

    electricityContractWithAccess:
      allOf:
        - $ref: "#/components/schemas/electricitySupplyContract_Usr"
        - type: object
          properties:
            access:
              $ref: "#/components/schemas/userContractAccess"
          required:
            - access

    electricConsumerWithoutId:
      type: object
      properties:
        name:
          type: string
          example: Waschmaschine
        brand:
          type: string
          example: Siemsch
        type:
          type: string
          example: washing-machine
        usageFrequency:
          type: integer
          example: 1
          minimum: 1
        usagePeriod:
          type: string
          enum: [daily, weekly, monthly, yearly]
        purchaseYear:
          type: integer
          minimum: 1950
      required:
        - name
        - brand
        - type
        - usageFrequency
        - usagePeriod
        - purchaseYear

    electricConsumer:
      allOf:
        - $ref: "#/components/schemas/electricConsumerWithoutId"
        - type: object
          properties:
            consumerId:
              type: string
            lastModified:
              type: string
              format: date-time
              readOnly: true
              nullable: true
            created:
              type: string
              format: date-time
              readOnly: true
              nullable: true
          required:
            - consumerId

    electricConsumerType:
      type: object
      properties:
        type:
          type: string
          example: wasching-machine
        name:
          type: string
          example: Waschmaschine
      required:
        - type
        - name

    sensorAnnouncement:
      type: object
      properties:
        sensorType:
          type: string
          enum:
            - smart-me
            - smart-me-railmeter
            - bsed-nanobeemes
            - cuculus-me1
            - ik-elek-mca
        meterId:
          $ref: "#/components/schemas/meterSerial"
      required:
        - sensorType

    sensorStatus:
      type: object
      description: meterId is only present if status is success, error is present if status is error
      properties:
        status:
          type: string
          enum:
            - successfull
            - started
            - waiting
            - error
        meterId:
          $ref:  "#/components/schemas/meterSerial"
        error:
          $ref: "#/components/schemas/error"
      required:
        - status

  responses:
    error:
      description: There was an error, see response for additional information
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"

    user:
      description: The user object
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/user"

    contract:
      description: a contract object
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/electricityContractWithAccess"

    electricMeter:
      description: a meter object
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/electricMeter"

    tariff:
      description: a tariff object
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/tariff"

  parameters:
    contractId:
      name: contractId
      in: path
      description: The unique id of a contract
      required: true
      schema:
        type: string
    consumerId:
      name: consumerId
      in: path
      required: true
      schema:
        type: string
    meterId:
      name: meterId
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/meterSerial"
    tariffId:
      name: tariffId
      in: path
      description: The unique id of a tariff
      required: true
      schema:
        type: string
    sensorSerial:
      in: path
      name: sensorSerial
      schema:
        type: string
      required: true
      description: Sensor serial, may be specific to the manufacturer
    apiVersion:
      in: header
      name: "ApiVersion"
      schema:
        $ref: '#/components/schemas/apiVersion'
      required: true
    optInId:
      in: path
      name: optInId
      schema:
        type: string
      required: true
      description: A optInId

paths:
  "/user":
    parameters:
      - $ref: "#/components/parameters/apiVersion"

    get:
      tags:
        - user
      operationId: user-get
      description: get information about the user
      responses:
        "200":
          $ref: "#/components/responses/user"
        "400":
          $ref: "#/components/responses/error"

    patch:
      tags:
        - user
      operationId: user-patch
      description: Update a users personal data.
      requestBody:
        description: update attributes that can be changed by the user. All attributes are optional, only attributes that are present are changed.
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/userWithoutId"
      responses:
        "200":
          $ref: "#/components/responses/user"
        "400":
          $ref: "#/components/responses/error"

    put:
      tags:
        - user
      operationId: user-put
      description: Overwrite an existing user
      requestBody:
        description: All elements of the user are replaced on update.
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/userWithoutId"
      responses:
        "200":
          $ref: "#/components/responses/user"
        "400":
          $ref: "#/components/responses/error"


  "/user/regulations":
    parameters:
      - $ref: "#/components/parameters/apiVersion"
    get:
      operationId: regulations-get
      tags:
        - user
      description: Read the user privacyStatement and optIns
      responses:
        "200":
          description: The update was stored
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/regulations"
        "400":
          $ref:  "#/components/responses/error"

  "/user/regulations/privacyStatement":
    parameters:
      - $ref: "#/components/parameters/apiVersion"
    put:
      operationId: regulations-update-privacy-statement
      tags:
        - user
      description: Update a regulation
      requestBody:
        description: The privacy statement
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/regulation"
      responses:
        "200":
          description: The update was stored
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/regulation"
        "400":
          $ref:  "#/components/responses/error"

  "/user/regulations/optIn/{optInId}":
    parameters:
      - $ref: "#/components/parameters/apiVersion"
      - $ref: "#/components/parameters/optInId"
    put:
      tags:
        - user
      operationId: regulations-create-or-update-optin
      description: Update a regulation
      requestBody:
        description: The privacy statement
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/regulation"
      responses:
        "200":
          description: The update was stored
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/optIn"
        "400":
          $ref:  "#/components/responses/error"


  "/addons":
    parameters:
      - $ref: "#/components/parameters/apiVersion"
    get:
      tags:
        - user
      operationId: "get-user-addons"
      description: "Get a list of activated AddOns for this user"
      responses:
        "200":
          description: List of activated AddOns
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/meterSerial"
        "400":
          $ref: "#/components/responses/error"

  "/electricConsumers/types":
    parameters:
      - $ref: "#/components/parameters/apiVersion"
    get:
      tags:
        - electricConsumers
      operationId: electric-consumers-read-types
      description: Returns a list of supported electric consumers
      responses:
        "200":
          description: returns a list of electric consumers that are supported
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/electricConsumerType"

  "/contracts":
    parameters:
      - $ref: "#/components/parameters/apiVersion"
    get:
      tags:
        - contracts
      operationId: contracts-read-all
      description: get all contracts that the user has access to
      responses:
        "200":
          description: a list of contract objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/electricityContractWithAccess"

  "/contracts/{contractId}":
    parameters:
      - $ref: "#/components/parameters/apiVersion"
      - $ref: "#/components/parameters/contractId"
    get:
      tags:
        - contracts
      operationId: contract-read
      description: get a specific contract object
      responses:
        "200":
          $ref: "#/components/responses/contract"

    delete:
      tags:
        - contracts
      operationId: contract-delete
      description: Delete a contract. Deletes all information, tariffs, devices and measurements. Will raise an error if deletion is not allowed.
      responses:
        "202":
          description: Deletion was accepted. Full deletion of all measurements will take some time.
        "400":
          $ref: "#/components/responses/error"

    patch:
      tags:
        - contracts
      operationId: contract-update
      description: Update contract information
      requestBody:
        description: Update some fields of a contract. All fields are optional. Only fields that are present in the body are updated, but only if it is allowed for the user to update them.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/electricitySupplyContractWithoutId_Usr"
      responses:
        "200":
          description: contract was successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/electricityContractWithAccess"

    put:
      tags:
        - contracts
      operationId: contract-overwrite
      description: Overwrites an existing contract.
      requestBody:
        description: All elements of the contract are replaced on update.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/electricitySupplyContractWithoutId_Usr"
      responses:
        "200":
          description: contract was successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/electricityContractWithAccess"

  "/contracts/{contractId}/meters":
    parameters:
      - $ref: "#/components/parameters/apiVersion"
      - $ref: "#/components/parameters/contractId"
    get:
      tags:
        - meters
      operationId: meters-read-all
      description: get all meters for a contract

      responses:
        "200":
          description: a list of all electric meters of this contract
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/electricMeter"

  "/meters/{meterId}":
    parameters:
      - $ref: "#/components/parameters/apiVersion"
      - $ref: "#/components/parameters/meterId"
    get:
      tags:
        - meters
      operationId: meter-read
      description: read a specific meter
      responses:
        "200":
          $ref:  "#/components/responses/electricMeter"

    patch:
      tags:
        - meters
      operationId: meter-patch
      description: Update attributes of a meter
      requestBody:
        description: patch payload. every attribute is optional. Only attributes that are present wil be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/electricMeterUpdate"
      responses:
        "200":
          $ref:  "#/components/responses/electricMeter"

    put:
      tags:
        - meters
      operationId: meter-put
      description: Overwrites an existing meter.
      requestBody:
        description: All elements of the meter are replaced on update.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/electricMeter"
      responses:
        "200":
          $ref:  "#/components/responses/electricMeter"

    delete:
      tags:
        - meters
      operationId: meter-delete
      description: remove a specific meter. Only possible if the allowOnboarding is true for the contract
      responses:
        "200":
          description: deletes a smart-meter from a contract. No more data will be collected, even if the meter or sensor ist still connected and sending data


  "/contracts/{contractId}/bills":
    parameters:
      - $ref: "#/components/parameters/apiVersion"
      - $ref: "#/components/parameters/contractId"
    get:
      tags:
        - contracts
      operationId: bills-read-for-contract
      description: get all bills for a contract
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bill"

        "400":
          $ref: "#/components/responses/error"

  "/meters/{meterId}/electricConsumers":
    parameters:
      - $ref: "#/components/parameters/apiVersion"
      - $ref: "#/components/parameters/meterId"

    get:
      tags:
        - electricConsumers
      operationId: electric-consumers-read
      description: get all electric consumers of a contract/meter
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/electricConsumer"

        "400":
          $ref: "#/components/responses/error"

    post:
      tags:
        - electricConsumers
      operationId: electric-consumers-add
      description: add new electric consumer
      requestBody:
        description: an electric consumer object. id is generated by the server
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/electricConsumerWithoutId"
      responses:
        "200":
          description: electric consumer was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/electricConsumer"
        "400":
          $ref: "#/components/responses/error"

  "/meters/{meterId}/electricConsumers/{consumerId}":
    parameters:
      - $ref: "#/components/parameters/apiVersion"
      - $ref: "#/components/parameters/meterId"
      - $ref: "#/components/parameters/consumerId"
    put:
      tags:
        - electricConsumers
      operationId: electric-consumers-overwrite
      description: Create a new electric consumer, or update an existing one

      requestBody:
        description: a electric consumer object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/electricConsumer"

      responses:
        "200":
          description: The object was created or updated
        "400":
          $ref: "#/components/responses/error"

    delete:
      tags:
        - electricConsumers
      operationId: electric-consumers-delete
      description: Delete an electric consumer
      responses:
        "200":
          description: The object was deleted
        "400":
          $ref: "#/components/responses/error"

  "/contracts/{contractId}/supplyTariffs":
    parameters:
      - $ref: "#/components/parameters/apiVersion"
      - $ref: "#/components/parameters/contractId"
    post:
      tags:
        - tariffs
      operationId: supply-tariff-create
      description: Add a new tariff to a contract. Tariffs may not overlap. If an overlapping tariff with no end date exists, the end date of the overlapping tariff will be set to the start date of this tariff. Will raise an error if allowTariffManagement is false for the contract
      requestBody:
        description: StartDate, kwhPricing and basePrice are required. If no id is passed, one is generated.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tariff"

      responses:
        "200":
          description: Tariff was sucesfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tariff"
        "400":
          $ref: "#/components/responses/error"

    get:
      tags:
        - tariffs
      operationId: supply-tariffs-read
      description: Get all supply-tariffs of a contract.
      responses:
        "200":
          description: The list of all tariffs in JSON list format, ordered by startDate.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/tariff"

        "400":
          $ref: "#/components/responses/error"

  "/contracts/{contractId}/supplyTariffs/{tariffId}":
    parameters:
      - $ref: "#/components/parameters/apiVersion"
      - $ref: "#/components/parameters/contractId"
      - $ref: "#/components/parameters/tariffId"
    get:
      tags:
        - tariffs
      operationId: supply-tariff-read
      description: Returns the specific tariff.
      responses:
        "200":
          $ref: "#/components/responses/tariff"
        "400":
          $ref: "#/components/responses/error"

    delete:
      tags:
        - tariffs
      operationId: supply-tariff-delete
      description: Deletes the specific tariff. You cannot delete the tariff that is currently active. Will raise an error if allowTariffManagement is false for the contract
      responses:
        "200":
          description: The tariff was deleted.
        "400":
          $ref: "#/components/responses/error"
    patch:
      tags:
        - tariffs
      operationId: supply-tariff-update
      description: Updates the specified tariff.
      requestBody:
        description: All fields are optional. ID is ignored if present. Updates only values that are present in the body. Will raise an error if allowTariffManagement is false for the contract
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tariffWithoutId"
      responses:
        "200":
          description: The tariff was updated, the new object is returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tariff"
        "400":
          $ref: "#/components/responses/error"
    put:
      tags:
        - tariffs
      operationId: supply-tariff-create-or-overwrite
      description: Create a new tariff or overwrites an existing tariff. Will raise an error if allowTariffManagement is false for the contract
      requestBody:
        description: All elements of the tariff are replaced on update.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tariffWithoutId"
      responses:
        "200":
          description: The tariff was updated, the new object is returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tariff"
        "400":
          $ref: "#/components/responses/error"

  "/contracts/{contractId}/onboarding/{sensorSerial}/announce":
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: "#/components/parameters/contractId"
      - $ref: "#/components/parameters/sensorSerial"

    post:
      tags:
      - onboarding
      operationId: onboarding-start
      summary: Anounce new sensor to listen for data
      description: Anounce new sensor to listen for data
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sensorAnnouncement"
      responses:
        '200':
          description: sensor onboarding accepted.
        '400':
          $ref: "#/components/responses/error"

  "/contracts/{contractId}/onboarding/{sensorSerial}/info":
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: "#/components/parameters/contractId"
      - $ref: "#/components/parameters/sensorSerial"
    get:
      tags:
      - onboarding
      operationId: onboarding-check
      summary: Gives information about the current onboarding status of the sensor
      description: Gives information about the current onboarding status of the sensor
      responses:
        '200':
          description: Returns the status of the announcement
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/sensorStatus"
        '400':
          $ref: "#/components/responses/error"
  "/contracts/{contractId}/onboarding/{sensorSerial}/abort":
    parameters:
      - $ref: '#/components/parameters/apiVersion'
      - $ref: "#/components/parameters/contractId"
      - $ref: "#/components/parameters/sensorSerial"
    post:
      tags:
      - onboarding
      operationId: onboarding-abort
      summary: aborts an ongoing announcement
      description: aborts an ongoing announcement
      responses:
        '200':
          description: Announcement aborted or not present for any contract of the user
        '400':
          $ref: "#/components/responses/error"
